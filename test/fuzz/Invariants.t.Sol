pragma solidity 0.8.19;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {DeployDSC} from "../../script/DeployDSC.sol";
import {DSCEngine} from "../../src/DSCEngine.sol";
import {DecentralizedStableCoin} from "../../src/DecentralizedStablecoin.sol";
import {HelperConfig} from "../../script/HelperConfig.s.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {Handler} from "./Handler.t.sol";

contract InvariantTest is StdInvariant,Test{
    DeployDSC deployer;
    DSCEngin dsce;
    DecentralizedStableCoin dsc;
    HelperConfig config;
    address weth;
    address wbtc;

    function setUp() external{
        deployer = new DeployDSC();
        (dsce,dsc,config) = deployer.run();
        (,,weth,wbtc,)= config.activeNetworkConfig();
        handler = new Handler(dsce,dsc);
        targetContract(address(handler));
        // targetContract(address(dsce));
    }

    function invariant_protocolMustHaveMoreValueThanTotalSupply() public view {
        uint256 totalSupply = dsc.totalSupply();
        uint256 totalWethDeposited = IERC20(weth).balanceOf(address(dsce));
        uint256 totalWbtcDeposited = IERC20(wbtc).balanceOf(address(dsce));

        uint256 wethValue = dsce.getUsdValue(weth,totalWethDeposited);
        uint256 wbtcValue = dsce.getUsdValue(wbtc,totalWbtcDeposited);

        console.log("weth value: ",wethValue);
        console.log("wbtc value: ",wbtcValue);
        console.log("total supply: ",totalSupply);
        console.log("Times mint Called: ",handler.timesMintIsCalled());
        
        assert(wethValue+wbtcValue > totalSupply);
    }
    function invariants_getterShouldNotRevert() public view{
        dsce.getLiquidationBonus();
        dsce.getPrecision();
    }
}